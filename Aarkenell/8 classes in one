require "herorealms"
require "decks"
require "stdlib"
require "stdcards"
require "hardai"
require "mediumai"
require "easyai"

-- Custom Class Selection cards
function choose_demonologist_carddef()
    return createDef({
        id="choose_demonologist",
        name="Choose the Demonologist",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_demonologist",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Demonologist", currentPid))
			.seq(setPlayerAvatarEffect("ruinos_zealot", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(50).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(50))
			.seq(createCardEffect(demonologist_summon_demon_carddef(), currentSkillsLoc))
			.seq(createCardEffect(demonologist_summon_greater_demon_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_shadow_feeder_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_void_guard_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_lesser_devourer_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_shadow_gem_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Demonologist",
            art = "art/T_Tyrannor_The_Devourer",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
			<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Demonologist" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Aarkenell -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>

			]]
			}),
        })
	end

function choose_apothecary_carddef()
    return createDef({
        id="choose_apothecary",
        name="Choose the Apothecary",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_apothecary",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Apothecary", currentPid))
			.seq(setPlayerAvatarEffect("alchemist_01", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(52).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(52))
			.seq(createCardEffect(apothecary_restorative_draught_carddef(), currentSkillsLoc))
			.seq(createCardEffect(apothecary_custom_brew_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(apothecary_mezzaluna_carddef(), currentDeckLoc))
			.seq(createCardEffect(apothecary_apprentice_potion_maker_carddef(), currentDeckLoc))
			.seq(createCardEffect(apothecary_yellow_potion_carddef(), currentDeckLoc))
			.seq(createCardEffect(apothecary_red_potion_carddef(), currentDeckLoc))
			.seq(createCardEffect(apothecary_green_potion_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Apothecary",
            art = "art/treasures/T_Green_Potions_Medium",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Apothecary" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Aarkenell -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
			}),
        })
	end

function choose_cryomancer_carddef()
    return createDef({
        id="choose_cryomancer",
        name="Choose the Cryomancer",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_cryomancer",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Cryomancer", currentPid))
			.seq(setPlayerAvatarEffect("rayla__endweaver_flipped", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(52).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(52))
			.seq(createCardEffect(cryomancer_frostbiteskill_carddef(), currentSkillsLoc))
			.seq(createCardEffect(cryomancer_blizzard_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(cryomancer_ice_burst_carddef(), currentDeckLoc))
			.seq(createCardEffect(cryomancer_ice_shield_carddef(), currentDeckLoc))
			.seq(createCardEffect(cryomancer_ice_gem_carddef(), currentDeckLoc))
			.seq(createCardEffect(cryomancer_freeze_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Cryomancer",
            art = "art/T_Heavy_Gust",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Cryomancer" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Aarkenell -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
			}),
        })
	end

function choose_pyromancer_carddef()
    return createDef({
        id="choose_pyromancer",
        name="Choose the Pryomancer",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_pyromancer",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Pyromancer", currentPid))
			.seq(setPlayerAvatarEffect("summoner", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(48).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(48))
			.seq(createCardEffect(pyromancer_fuel_1carddef(), currentSkillsLoc))
			.seq(createCardEffect(pyromancer_conflagration_1p_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(ruby_carddef(), currentDeckLoc))
			.seq(createCardEffect(pyromancer_sear_carddef(), currentDeckLoc))
			.seq(createCardEffect(pyromancer_scorch_carddef(), currentDeckLoc))
			.seq(createCardEffect(pyromancer_fire_shard_carddef(), currentDeckLoc))
			.seq(createCardEffect(pyromancer_combust_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Pyromancer",
            art = "art/T_Blistering_Blaze",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Pyromancer" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Aarkenell -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
			}),
        })
	end

function choose_thandarlorian_carddef()
    return createDef({
        id="choose_thandarlorian",
        name="Choose the Thandarlorian",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_thandarlorian",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Thandarlorian", currentPid))
			.seq(setPlayerAvatarEffect("cristov__the_just", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(36).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(const(36).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(createCardEffect(thandarlorian_dragon_shard_armour_carddef(), currentSkillsLoc))
			.seq(createCardEffect(thandarlorian_bracer_blades_carddef(), currentSkillsLoc))
			.seq(createCardEffect(thandarlorian_whipcord_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(ruby_carddef(), currentDeckLoc))
			.seq(createCardEffect(ruby_carddef(), currentDeckLoc))
			.seq(createCardEffect(thandarlorian_coordinated_attack_carddef(), currentDeckLoc))
			.seq(createCardEffect(thandarlorian_combat_shield_carddef(), currentDeckLoc))
			.seq(createCardEffect(thandarlorian_hand_ballista_carddef(), currentDeckLoc))
			.seq(createCardEffect(thandarlorian_bounty_hunters_stone_of_seeking_carddef(), currentDeckLoc))
			.seq(createCardEffect(shortsword_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "The Thandarlorian",
            art = "art/T_Domination",
            frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Thandarlorian" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Aarkenell -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
        })
    })
	end

function choose_paladin_carddef()
    return createDef({
        id="choose_paladin",
        name="Choose the Paladin",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_paladin",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Paladin", currentPid))
			.seq(setPlayerAvatarEffect("cristov__the_just", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(58).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(58))
			.seq(createCardEffect(paladin_prayer_carddef(), currentSkillsLoc))
			.seq(createCardEffect(paladin_sacred_oath_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(ruby_carddef(), currentDeckLoc))
			.seq(createCardEffect(paladin_warhammer_carddef(), currentDeckLoc))
			.seq(createCardEffect(paladin_crusader_carddef(), currentDeckLoc))
			.seq(createCardEffect(cleric_spiked_mace_carddef(), currentDeckLoc))
			.seq(createCardEffect(fighter_longsword_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Paladin",
            art = "art/T_Cristov_The_Just",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Paladin" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by agentC13 -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
			}),
        })
	end

function choose_witch_carddef()
    return createDef({
        id="choose_witch",
        name="Choose the Witch",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_witch",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Witch", currentPid))
			.seq(setPlayerAvatarEffect("chanting_cultist", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(51).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(51))
			.seq(createCardEffect(siphon_life_def(), currentSkillsLoc))
			.seq(createCardEffect(piercing_screech_def(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(witch_flash_freeze_carddef(), currentDeckLoc))
			.seq(createCardEffect(witch_flash_freeze_carddef(), currentDeckLoc))
			.seq(createCardEffect(cleric_everburning_candle_carddef(), currentDeckLoc))
			.seq(createCardEffect(witch_cauldron_carddef(), currentDeckLoc))
			.seq(createCardEffect(wizard_cat_familiar_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Witch",
            art = "avatars/chanting_cultist",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Witch" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Userkaffe -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>
			]]
			}),
        })
	end

function choose_shaman_carddef()
    return createDef({
        id="choose_shaman",
        name="Choose the Shaman",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="choose_shaman",
                trigger= onPlayTrigger,
				playAllType = noPlayPlayType,
                effect = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Shaman", currentPid))
			.seq(setPlayerAvatarEffect("wolf_shaman", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(50).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(const(50).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(createCardEffect(gift_of_the_elements_carddef(), currentSkillsLoc))
			.seq(createCardEffect(elemental_surge_def(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(ruby_carddef(), currentDeckLoc))
			.seq(createCardEffect(natures_blessing_carddef(), currentDeckLoc))
			.seq(createCardEffect(flame_burst_carddef(), currentDeckLoc))
            .seq(createCardEffect(flame_burst_carddef(), currentDeckLoc))
			.seq(createCardEffect(call_lightning_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(sacrificeTarget().apply(selectSource()))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
			.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
			.seq(waitForClickEffect("For game to begin normally please end turn now.", ""))
            })
        },
        layout = createLayout({
            name = "Shaman",
            art = "avatars/wolf_shaman",
			frame = "frames/Coop_Campaign_CardFrame",
            xmlText=[[
			<vlayout>
    <box flexibleheight="2">
        <tmpro text="Play as a level 3 Shaman" fontsize="26"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="- Class by Filtrophobe -" fontsize="22" fontstyle="italic"/>
    </box>
</vlayout>

			]]
			}),
        })
	end

-- Demonologist cards
function demonologist_shadow_gem_carddef()
    return createDef(
        {
            id = "demonologist_shadow_gem",
            name = "Shadow Gem",
            types = {gemType, noStealType, itemType},
			            acquireCost = 0,
            cardTypeLabel = "Item",
            playLocation = castPloc,
            abilities = {
				createAbility(
                    {
                        id = "demonologist_shadow_gem_sac",
                        PlayAllType = noPlayPlayType,
						cost = noCost,
						trigger = autoTrigger,
                        activations = singleActivations,
						                        effect = pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainGoldEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Shadow Gem",
                                                    art = "art/treasures/T_Brillant_Ruby",
                                                    xmlText=[[
													<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="7">
            <icon text="{gold_2}" fontsize="60"/>
</box>
</hlayout>
</vlayout>
													]]
                                                }
                                            ),
                                            tags = {gainCombatTag}
                                        },
                                        {
                                            effect = pushTargetedEffect({
												desc = "Lose <sprite name=\"health_1\"> to give one minion +2 <sprite name=\"shield\"> until your next turn.",
												validTargets = selectLoc(currentInPlayLoc).where(isCardType(minionType)),
												min = 0,
												max = 1,
												check = minHealthCurrent(2),
												targetEffect = grantHealthTarget(2, { SlotExpireEnum.startOfOwnerTurn }, nullEffect(), "shadow").seq(hitSelfEffect(1)),
												}),
                                            layout = layoutCard(
                                                {
                                                    title = "Shadow Gem",
                                                    art = "art/treasures/T_Brillant_Ruby",
                                                    xmlText=[[
<vlayout>
    <box flexibleheight="1">
        <tmpro text="{health_-1}" fontsize="42"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="Give one minion +2{shield} until your next turn." fontsize="24" />
    </box>
</vlayout>
													]]
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        ),
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Shadow Gem",
                    art = "art/treasures/T_Brillant_Ruby",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="7">
            <tmpro text="{gold_2}
-OR-
{health_-1}. Give one minion +2{shield} until your next turn." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]]
                }
            )
        }
    )
end

function demonologist_shadow_feeder_carddef()
    return createChampionDef(
        {
            id = "demonologist_shadow_feeder",
            name = "Shadow Feeder",
			types = {minionType, championType, nosteaalType},
            acquireCost = 0,
            health = 1,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "Shadow_feeder_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = ifElseEffect(selectLoc(currentInPlayLoc).where(isCardType(demonType)).count().gte(1),gainCombatEffect(3),gainCombatEffect(1))
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Shadow Feeder",
                    art = "art/T_Devil",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{combat_1} 
If you have another Demon in play gain {combat_2} more." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 2,
                    isGuard = false
                }
            )
        }
    )
end

function demonologist_void_guard_carddef()
    return createChampionDef(
        {
            id = "demonologist_void_guard",
            name = "Void guard",
			types = {minionType, championType, demonType, nosteaalType},
            acquireCost = 0,
            health = 2,
            isGuard = true,
            abilities = {
                createAbility(
                    {
                        id = "void_guard_main",
                        trigger = autoTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = gainCombatEffect(1)
						
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Void guard",
                    art = "art/T_Midnight_Knight",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{combat_1} 
You can't a-void him." fontsize="30"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 2,
                    isGuard = true
                }
            )
        }
    )
end

function demonologist_lesser_devourer_carddef()
    return createChampionDef(
        {
            id = "demonologist_lesser_devourer",
            name = "Lesser Devourer",
			types = {minionType, championType, demonType, nosteaalType},
            acquireCost = 0,
            health = 2,
            isGuard = true,
            abilities = {
                createAbility(
                    {
                        id = "lesser_devourer_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = hitSelfEffect(1).seq(grantHealthTarget(1, { SlotExpireEnum.LeavesPlay }, nullEffect(), "shadow").apply(selectSource())),
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Lesser Devourer",
                    art = "art/T_Demon",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText = [[
<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{health_-1} 
Lesser Devourer gains +1{shield} until it leaves play." fontsize="30"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 2,
                    isGuard = true
                }
            )
        }
    )
end

function demonologist_summon_demon_carddef()
    local cardLayout = createLayout({
        name = "Summon",
        art = "icons/The_Summoning",
        frame = "frames/necromancer_frames/necromancer_item_cardframe",
		xmlText=[[
		<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{health_-1} 
Randomly summon 1 of 3 demon tokens into play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
		]]
    })

 return createSkillDef({
        id = "demonologist_summon_skill",
        name = "Summon Demon",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/The_Summoning",
        abilities = {
            createAbility({
                id = "demonologist_summon_demon_ab",
                trigger = uiTrigger,
				check = minHealthCurrent(2),
                activations = singleActivation,
                layout = cardLayout,
                promptType = showPrompt,
                effect =pushChoiceEffectWithTitle(
                                {
                                    choices = {
                                        {
                                            effect = hitSelfEffect(1).seq(randomEffect({
					valueItem(1, createCardEffect(demonologist_demonic_leech_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_succubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_fel_hound_carddef(), currentInPlayLoc))
})).seq(noUndoEffect()),
                                            layout = createLayout(
                {
                    name = "Demonic leech",
                    art = "art/T_wurm",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
					xmlText = [[
<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Deal 1 damage to opponent.
Demonic Leech gains 1{shield} until it leaves play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]],
					health = 1,
                    isGuard = false
                }
            ),
                                            tags = {gainCombatTag}
                                        },
                                        
										{
                                           effect = hitSelfEffect(1).seq(randomEffect({
					valueItem(1, createCardEffect(demonologist_demonic_leech_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_succubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_fel_hound_carddef(), currentInPlayLoc))
})).seq(noUndoEffect()),
                                            layout = createLayout(
                {
                    name = "Fel hound",
                    art = "art/T_Strength_of_the_wolf",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <icon text="{combat_2}" fontsize="60"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 1,
                    isGuard = false
                }
            ),
                                            tags = {gainCombatTag}
                                        },
										
										{
                                            effect = hitSelfEffect(1).seq(randomEffect({
					valueItem(1, createCardEffect(demonologist_demonic_leech_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_succubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_fel_hound_carddef(), currentInPlayLoc))
})).seq(noUndoEffect()),
                                            layout = createLayout(
                {
                    name = "Succubus",
                    art = "art/T_Banshee",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Give target champion -1{shield} until it leaves play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 1,
                    isGuard = false
                }
            ),
                                                                                    }
                                    },
					upperTitle = "Summon one of these 3 demon tokens, randomly.",
					lowerTitle = "Click any card to proceed."
					}),
				cost = goldCost(2),
			}),
        },
		layout = createLayout(
                {
                    name = "Summon Demon",
                    art = "icons/The_Summoning",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{health_-1} 
Randomly summon 1 of 3 demon tokens into play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]]
                }
            )
        
    })
end

function demonologist_demonic_leech_carddef()
--[[ START Demonic leech CARD
]]
    return createChampionDef(
        {
            id = "demonologist_demonic_leech",
            name = "Demonic leech",
			types = {minionType, championType, demonType, nostealType, tokenType},
            acquireCost = 0,
            health = 1,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "demonic_leech_main",
                        trigger = autoTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = hitOpponentEffect(1)
								.seq((grantHealthTarget(1, { SlotExpireEnum.LeavesPlay }, nullEffect(), "shadow")).apply(selectSource()))
                    }
                ),
				createAbility(
                    {
                        id = "demonic_leech_sac",
                        trigger = onLeavePlayTrigger,
                        cost = sacrificeSelfCost,
                        activations = singleActivations,
                        effect = nullEffect()
					}	
                    
                )
            },
            layout = createLayout(
                {
                    name = "Demonic leech",
                    art = "art/T_wurm",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
					xmlText = [[
<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Deal 1 damage to opponent.
Demonic Leech gains 1{shield} until it leaves play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]],
					health = 1,
                    isGuard = false
                }
            )
        }
    )
end

function demonologist_fel_hound_carddef()
--This is a token champion, that self-sacrifices when it leaves play
    return createChampionDef(
        {
            id = "demonologist_fel_hound",
            name = "Fel hound",
			types = {minionType, championType, demonType, nostealType, tokenType},
            acquireCost = 0,
            health = 1,
            isGuard = false,
            abilities = {
			--base ability
                createAbility(
                    {
                        id = "fel_hound_main",
                        trigger = autoTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = gainCombatEffect(2)
						
                    }
                )
            ,
			--self-sac ability
                createAbility(
                    {
                        id = "fel_hound_sac",
                        trigger = onLeavePlayTrigger,
                        cost = sacrificeSelfCost,
                        activations = singleActivations,
                        effect = nullEffect()
					}	
                    
                )},
            layout = createLayout(
                {
                    name = "Fel hound",
                    art = "art/T_Strength_of_the_wolf",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <icon text="{combat_2}" fontsize="60"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 1,
                    isGuard = false
                }
            )
        }
    )
end

function demonologist_succubus_carddef()
    return createChampionDef(
        {
            id = "demonologist_succubus",
            name = "Succubus",
			types = {minionType, championType, demonType, nostealType, tokenType},
            acquireCost = 0,
            health = 1,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "succubus_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = pushTargetedEffect({
                                                desc = "Give target champion -1<sprite name=\"shield\"> until it leaves play.",
                                                validTargets = oppStunnableSelector(),
                                                min = 0,
                                                max = 1,
                                                targetEffect = (grantHealthTarget(-1, { SlotExpireEnum.leavesPlay }, nullEffect(), "shadow")),
                                                })
						
						
						
                    }
                )
            ,
                },
            layout = createLayout(
                {
                    name = "Succubus",
                    art = "art/T_Banshee",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend}" fontsize="40"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Give target champion -1{shield} until it leaves play." fontsize="25"/>
</box>
</hlayout>
</vlayout>
					]],
                    health = 1,
                    isGuard = false
                }
            )
        }
    )
end

function demonologist_summon_greater_demon_carddef()
    local cardLayout = createLayout({
        name = "Summon Greater Demon",
        art = "art/T_Tyrannor_The_Devourer",
        frame = "frames/necromancer_frames/necromancer_item_cardframe",
		xmlText=[[
		<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="2">
            <tmpro text="{scrap}" fontsize="50"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Randomly summon 1 of 3 Greater Demon tokens into play." fontsize="22"/> 
</box>
</hlayout>
</vlayout>
		]]
    })

    return createSkillDef({
        id = "demonologist_summon_greater_demon_ability",
        name = "Summon Greater Demon",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "art/T_Tyrannor_The_Devourer",
        abilities = {
            createAbility({
                id = "demonologist_summon_greater_demon_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                layout = cardLayout,
                promptType = showPrompt,
                effect = pushChoiceEffectWithTitle({
					  choices = {
                                        {
                                            effect = randomEffect({
					valueItem(1, createCardEffect(demonologist_incubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_keeper_of_the_void_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_demon_master_carddef(), currentInPlayLoc))
}).seq(noUndoEffect()),
                                            layout = createLayout({
            name = "Incubus",
            art = "art/T_Lesser_Vampire",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_2}" fontsize="50" flexiblewidth="10" />
    </hlayout>
    <divider/>
    <hlayout flexibleheight="3">
            <tmpro text="Incubus gains {combat_1} (permanently) at the start of each turn." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = false
        }),
                                            tags = {gainCombatTag}
                                        },
                                        {
                                            effect = randomEffect({
					valueItem(1, createCardEffect(demonologist_incubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_keeper_of_the_void_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_demon_master_carddef(), currentInPlayLoc))
}).seq(noUndoEffect()),
                                            layout = createLayout({
            name = "Keeper of the Void",
            art = "art/T_Giant_Knight",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_2}" fontsize="50" flexiblewidth="10" />
    </hlayout>
    <divider/>
    <hlayout flexibleheight="3">
            <tmpro text="Keeper of the Void gains +1{shield} for each other demon minion in play until your next turn." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = true
        }),
                                                                                    },
																					{
                                            effect = randomEffect({
					valueItem(1, createCardEffect(demonologist_incubus_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_keeper_of_the_void_carddef(), currentInPlayLoc)),
					valueItem(1, createCardEffect(demonologist_demon_master_carddef(), currentInPlayLoc))
}).seq(noUndoEffect()),
                                            layout = createLayout({
            name = "Demon Master",
            art = "art/T_Angry_Skeleton",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_1}" fontsize="50" flexiblewidth="10" />
    </hlayout>
      <hlayout flexibleheight="3">
            <tmpro text="Prepare up to 2 other demon minions." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = false
        }),
                                                                                    }
                                    },
					  upperTitle = "Randomly summon one of these 3 demons.",
					  lowerTitle = "Click any card to proceed."
					}),
				cost = sacrificeSelfCost,
			}),
        },
		layout = createLayout(
                {
                    name = "Summon Greater Demon",
                    art = "art/T_Tyrannor_The_Devourer",
                    frame = "frames/necromancer_frames/necromancer_item_cardframe",
                    xmlText=[[
					<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="2">
            <tmpro text="{scrap}" fontsize="50"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Randomly summon 1 of 3 Greater Demon tokens into play." fontsize="22"/> 
</box>
</hlayout>
</vlayout>
					]]
                }
            )
        
    })
end

function demonologist_incubus_carddef()
    return createChampionDef(
        {
            id = "demonologist_incubus",
            name = "Incubus",
			types = {championType, demonType, minionType, nostealType},
            acquireCost = 0,
            health = 3,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "demonologist_incubus_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = gainCombatEffect(2).seq(gainCombatEffect(getCounter("incubus")))
                    }
                ),
				
				createAbility(
                    {
                        id = "demonologist_incubus_main",
                        trigger = startOfTurnTrigger,
                        cost = noCost,
                        activations = multipleActivations,
                        effect = incrementCounterEffect("incubus", 1)
                    }
                ),
			
			createAbility(
                    {
                        id = "demonologist_incubus_sac",
                        trigger = onLeavePlayTrigger,
                        cost = sacrificeSelfCost,
                        activations = multipleActivations,
                        effect = nullEffect()
					}	
                    
                )
            },
            layout = createLayout({
            name = "Incubus",
            art = "art/T_Lesser_Vampire",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_2}" fontsize="50" flexiblewidth="10" />
    </hlayout>
    <divider/>
    <hlayout flexibleheight="3">
            <tmpro text="Incubus gains {combat_1} (permanently) at the start of each turn." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = false
        })
        }
    )
end

function demonologist_keeper_of_the_void_carddef()
    return createChampionDef(
        {
            id = "demonologist_keeper_of_the_void",
            name = "Keeper of the Void",
			types = {championType, demonType, minionType, nostealType},
            acquireCost = 0,
            health = 3,
            isGuard = true,
            abilities = {
                createAbility(
                    {
                        id = "demonologist_keeper_of_the_void_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = gainCombatEffect(2)
						.seq(grantHealthTarget(selectLoc(loc(currentPid, inPlayPloc)).where(isCardType("minion").And(isCardName("demonologist_keeper_of_the_void").invert())).count(), { SlotExpireEnum.startOfOwnerTurn }, nullEffect(), "Void Keeper").apply(selectSource())),
                    }
                ),
				
			createAbility(
                    {
                        id = "demonologist_keeper_of_the_void_sac",
                        trigger = onLeavePlayTrigger,
                        cost = sacrificeSelfCost,
                        activations = multipleActivations,
                        effect = nullEffect()
					}	
                    
                )
            },
            layout = createLayout({
            name = "Keeper of the Void",
            art = "art/T_Giant_Knight",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_2}" fontsize="50" flexiblewidth="10" />
    </hlayout>
    <divider/>
    <hlayout flexibleheight="3">
            <tmpro text="Keeper of the Void gains +1{shield} for each other demon minion in play until your next turn." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = true
        })
        }
    )
end

function demonologist_demon_master_carddef()
    return createChampionDef(
        {
            id = "demonologist_demon_master",
            name = "Demon Master",
			types = {championType, demonType, minionType, nostealType},
            acquireCost = 0,
            health = 3,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "demonologist_demon_master_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = gainCombatEffect(1).seq(pushTargetedEffect({
                    desc = "Prepare up to 2 other demon minions in play.",
                    validTargets = selectLoc(currentInPlayLoc).where(isCardType(minionType).And(isCardName("demonologist_demon_master").invert())),
                    min = 0,
                    max = 2,
                    targetEffect = prepareTarget()
				
            }))
                    }
                ),
							createAbility(
                    {
                        id = "demonologist_demon_master_sac",
                        trigger = onLeavePlayTrigger,
                        cost = sacrificeSelfCost,
                        activations = multipleActivations,
                        effect = nullEffect()
					}	
                    
                )
            },
            layout = createLayout({
            name = "Demon Master",
            art = "art/T_Angry_Skeleton",
            frame = "frames/necromancer_frames/necromancer_item_cardframe",
            xmlText = [[
			<vlayout>
    <hlayout flexibleheight="1">
            <tmpro text="{expend}" fontsize="50" flexiblewidth="2"/>
            <icon text="{combat_1}" fontsize="50" flexiblewidth="10" />
    </hlayout>
      <hlayout flexibleheight="3">
            <tmpro text="Prepare up to 2 other demon minions." fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
]],
					health = 3,
                    isGuard = false
        })
        }
    )
end


-- Apothecary cards
function apothecary_mezzaluna_carddef()
    return createDef(
        {
            id = "apothecary_mezzaluna",
            name = "Mezzaluna",
            types = {noStealType, itemType},
            acquireCost = 0,
            cardTypeLabel = "Item",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "apothecary_mezzaluna",
                        layout = cardLayout,
                        effect = gainCombatEffect(2),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Mezzaluna",
                    art = "art/T_Spell_Components",
                    frame = "frames/Wizard_CardFrame",
                    text = "<sprite name=\"combat_2\">",
                }
            )
        }
    )
end

function apothecary_apprentice_potion_maker_carddef()
    return createChampionDef(
        {
            id = "apothecary_apprentice_potion_maker",
            name = "Apprentice Potion Maker",
			types = {championType, nostealType},
            acquireCost = 0,
            health = 1,
            isGuard = false,
            abilities = {
                createAbility(
                    {
                        id = "apprentice_potion_maker_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainGoldEffect(1),
                                            layout = layoutCard(
                                                {
                                                    title = "Apprentice Potion Maker",
                                                    art = "art/T_Thief_Shadow_Mask",
                                                    text = "{1 gold}"
                                                }
                                            ),
                                            tags = {gainGold1Tag}
                                        },
                                        {
                                            effect = pushTargetedEffect({
												  desc="Move a potion from your discard to the top of your deck.",
												  min=0,
												  max=1,
												  validTargets= selectLoc(loc(currentPid, discardPloc)).where(isCardType("Elixir")),
												  targetEffect= moveTarget(currentDeckLoc),
												  tags = {}
}),
											
                                            layout = layoutCard(
                                                {
                                                    title = "Apprentice Potion Maker",
                                                    art = "art/T_Thief_Shadow_Mask",
                                                    text = "Move a potion from  your discard to the top of your deck."
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        )
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Apprentice Potion Maker",
                    art = "art/T_Thief_Shadow_Mask",
                    frame = "frames/Wizard_CardFrame",
                    text = "<sprite name=\"expend\"><sprite name=\"gold_1\"> -or- Move a potion from  your discard to the top of your deck.",
                    health = 1,
                    isGuard = false
                }
            )
        }
    )
end

function apothecary_red_potion_carddef()
    return createDef({
        id="apothecary_red_potion",
        name="Red Potion",
        types={noStealType, itemType, elixirType},
        acquireCost=0,
		cardTypeLabel = "Item",
		playLocation = castPloc,
        abilities = {
            createAbility({
                id="apothecary_red_potion",
                trigger= autoTrigger,
                effect = gainCombatEffect(2)
            }),
			createAbility({
                id="apothecary_red_potion_combo",
                trigger= autoTrigger,
				prompt = showPrompt,
				cost = noCost,
				activations = singleActivations,
				check = selectLoc(loc(currentPid, castPloc)).where(isCardName("apothecary_yellow_potion")).count().gte(1),
                effect = oppDiscardEffect(1),
            })
        },
        layout = createLayout({
            name = "Red potion",
            art = "art/T_Elixir_of_strength",
            frame = "frames/Wizard_CardFrame",
            text = "<sprite name=\"combat_2\"> If you have yellow potion in play, opponent discards a card."
        })
    })
	end

function apothecary_green_potion_carddef()
    return createDef({
        id="apothecary_green_potion",
        name="Green Potion",
        types={noStealType, itemType, elixirType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="apothecary_green_potion",
                trigger= autoTrigger,
                effect = gainHealthEffect(2)
            }),
			createAbility({
                id="apothecary_green_potion_combo",
				cost = noCost,
                trigger= uiTrigger,
				promptType = showPrompt,
					layout = createLayout({
					name = "Green Potion",
					art = "art/treasures/T_Green_Potions_Medium",
					frame = "frames/Wizard_CardFrame",
					text = "<sprite name=\"health_2\"> If you have a red potion in play, draw a card."
					}),
				activations = singleActivations,
				check = selectLoc(loc(currentPid, castPloc)).where(isCardName("apothecary_red_potion")).count().gte(1),
                effect = drawCardsEffect(1),
            })
        },
        layout = createLayout({
            name = "Green Potion",
            art = "art/treasures/T_Green_Potions_Medium",
            frame = "frames/Wizard_CardFrame",
            text = "<sprite name=\"health_2\"> If you have a red potion in play, draw a card."
        })
    })
	end

function apothecary_yellow_potion_carddef()
    return createDef({
        id="apothecary_yellow_potion",
        name="Yellow Potion",
        types={noStealType, itemType, elixirType},
        acquireCost=0,
		cardTypeLabel = "Item",
		playLocation = castPloc,
        abilities = {
            createAbility({
                id="apothecary_yellow_potion",
                trigger= autoTrigger,
                effect = gainGoldEffect(2)
            }),
			createAbility({
                id="apothecary_yellow_potion_combo",
                trigger= autoTrigger,
				prompt = showPrompt,
				layout = layoutCard({
					name = "yellow Potion",
					art = "art/T_Elixir_of_fortune",
					frame = "frames/Wizard_CardFrame",
					text = "<sprite name=\"gold_2\"> If you have a green potion in play, gain 2 Toughness this turn."
							}),
				cost = noCost,
				activations = singleActivations,
				check = selectLoc(loc(currentPid, castPloc)).where(isCardName("apothecary_green_potion")).count().gte(1),
                effect = gainToughnessEffect(2),

            })
        },
        layout = createLayout({
            name = "yellow Potion",
            art = "art/T_Elixir_of_fortune",
            frame = "frames/Wizard_CardFrame",
            text = "<sprite name=\"gold_2\"> If you have a green potion in play, gain 2 Toughness this turn."
        })
    })
	end

function apothecary_custom_brew_carddef()
	return createHeroAbilityDef({
		id = "custom_brew",
		name = "Custom Brew",
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "custom_brewActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Custom Brew",
					art = "art/T_Elixir_of_concentration",
					frame = "frames/Wizard_CardFrame",
					xmlText = [[	
<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{scrap}" fontsize="36"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{combat_5}&lt;size=60%&gt; or &lt;/size&gt;{health_6}&lt;size=60%&gt; or 
Draw 1 and opponent discards 1." fontsize="40" />
        </box>
    </hlayout>
</vlayout>
					]]					
				}),
				effect =
				pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainCombatEffect(5),
                                            layout = layoutCard(
                                                {
                                                    title = "Custom Brew",
                                                    art = "art/T_Elixir_of_concentration",
													frame = "frames/Wizard_CardFrame",
                                                    xmlText = [[
													<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="7">
            <tmpro text="{combat_5}&lt;size=60%&gt;" fontsize="46" />
        </box>
    </hlayout>
</vlayout>
]]
                                                }
                                            ),
                                            tags = {gainCombat6Tag}
                                        },
										{
                                            effect = gainHealthEffect(6),
                                            layout = layoutCard(
                                                {
                                                    title = "Custom Brew",
                                                    art = "art/T_Elixir_of_concentration",
													frame = "frames/Wizard_CardFrame",
                                                    xmlText = [[
													<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="7">
            <tmpro text="{health_6}&lt;size=60%&gt;" fontsize="46" />
        </box>
    </hlayout>
</vlayout>
]]
                                                }
                                            ),
                                            tags = {gainHealthTag}
                                        },
                                        {
                                            effect = drawCardsEffect(1).seq(oppDiscardEffect(1)),
                                            layout = layoutCard(
                                                {
                                                    title = "Custom Brew",
                                                    art = "art/T_Elixir_of_concentration",
													frame = "frames/Wizard_CardFrame",
                                                    xmlText = [[
													<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="7">
            <tmpro text="Draw 1.
Opponent discards 1." fontsize="28" />
        </box>
    </hlayout>
</vlayout>
]]
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        ),
				cost = sacrificeSelfCost
			})
		},
        layout = createLayout({
            name = "Custom Brew",	
            art = "art/T_Elixir_of_concentration",
			frame = "frames/Wizard_CardFrame",
            text = "<sprite name=\"combat_5\"> or <sprite name=\"health_6\">  or Draw 1 and opponent discards 1."
        }),
        layoutPath  = "art/T_Elixir_of_concentration",
	})
end	

function apothecary_restorative_draught_carddef()
    local cardLayout = createLayout({
        name = "Restorative Draught",
        art = "art/treasures/T_ranger_elixir_yellow",
        frame = "frames/Wizard_CardFrame",
		xmlText = [[
		<vlayout>
			<hlayout flexibleheight="1">
				<box flexiblewidth="1">
					<tmpro text="{expend_2}" fontsize="72"/>
				</box>
				<box flexiblewidth="7">
					<tmpro text="Put a champion or action of cost 3g or less from your discard on top of your deck." fontsize="22" />
				</box>
			</hlayout>
		</vlayout>
		]]
    })

    return createSkillDef({
        id = "apothecary_restorative_draught_skill",
        name = "Restorative Draught",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "art/treasures/T_ranger_elixir_yellow",
        abilities = {
            createAbility({
                id = "apothecary_restorative_draught_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                layout = cardLayout,
				promptType = showPrompt,
                effect = pushTargetedEffect({
												  desc="Put a champion or action of cost 3g or less from your discard on top of your deck.",
												  min=0,
												  max=1,
												  validTargets= selectLoc(loc(currentPid, discardPloc)).where((isCardAction().Or(isCardChampion())).And(getCardCost().lte(3))),
												  targetEffect= moveTarget(currentDeckLoc),
												  tags = {}
												}),
                cost = goldCost(2),
            }),
        }
        
    })
end


-- Cryomancer cards
function cryomancer_ice_burst_carddef()
    return createDef(
        {
            id = "cryomancer_ice_burst",
            name = "Ice Burst",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "cryomancer_ice_burst",
                        layout = cardLayout,
                        effect = gainCombatEffect(2),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Ice Burst",
                    art = "art/T_Flame_Burst",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="{combat_2}" fontsize="42"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="'Have an ice day.'" fontsize="24" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function cryomancer_ice_shield_carddef()
    return createDef(
        {
            id = "cryomancer_ice_shield",
            name = "Ice Shield",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "cryomancer_ice_shield",
                        layout = cardLayout,
                        effect = ifElseEffect(selectLoc(loc(currentPid, castPloc)).where(isCardAction()).count().gte(3), gainToughnessEffect(2).seq(gainCombatEffect(2)), gainToughnessEffect(2)),
                        trigger = autoTrigger,
                        tags = {}
                    }
                ),
				
            },
            layout = createLayout(
                {
                    name = "Ice Shield",
                    art = "art/T_Glittering_Spray",
                    frame = "frames/Wizard_CardFrame",
                    xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain 2 Toughness." fontsize="22"/>   
							</hlayout>    
								<hlayout spacing="10">
								<text text="If you have 2 other actions in play, also gain {combat_2}." fontsize="18"/>    
							</hlayout>
							</vlayout>]],
                }
            )
        }
    )
end

function cryomancer_ice_gem_carddef()
    return createDef(
        {
            id = "cryomancer_ice_gem",
            name = "Ice Gem",
            types = {gemType, noStealType, itemType},
            acquireCost = 0,
            cardTypeLabel = "Item",
            playLocation = castPloc,
            abilities = {
                createAbility(
                    {
                        id = "cryomancer_ice_gem",
                        layout = cardLayout,
                        effect =
                        pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainGoldEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Ice Gem",
                                                    art = "art/T_Wizard_Alchemist_S_Stone",
                                                    text = "<sprite name=\"gold_2\">"
                                                }
                                            ),
                                            tags = {gainGold2Tag}
                                        },
                                        {
                                            effect = oppDiscardEffect(1),
                                            layout = layoutCard(
                                                {
                                                    title = "Ice Gem",
                                                    art = "art/T_Wizard_Alchemist_S_Stone",
                                                    text = "Opponent discards a card."
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        ),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Ice Gem",
                    art = "art/T_Wizard_Alchemist_S_Stone",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="1">
        <tmpro text="{gold_2}" fontsize="42"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="OR
Opponent discards a card." fontsize="22" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function cryomancer_freeze_carddef()
    return createDef(
        {
            id = "cryomancer_freeze",
            name = "Freeze",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "cryomancer_freeze",
                        layout = cardLayout,
                        effect = pushTargetedEffect({
												desc = "Brrr. It's cold in here. (Expend a champion.)",
												validTargets = oppStunnableSelector(),
												min = 0,
												max = 1,
												targetEffect = expendTarget().seq(gainCombatEffect(1)),
												}),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Freeze",
                    art = "art/T_Wind_Tunnel",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="2">
        <tmpro text="{combat_1}" fontsize="50"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="Expend a champion." fontsize="22" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function cryomancer_frostbiteskill_carddef()
    local cardLayout = createLayout({
        name = "Frostbite",
        art = "icons/wind_storm",
        frame = "frames/Wizard_CardFrame",
        xmlText = 
		[[
		<vlayout>
    <hlayout flexibleheight="3">
            <tmpro text="{expend_2}" fontsize="50" flexiblewidth="2"/>
            <tmpro text="Add a frostbite card to opponent's discard." fontsize="20" flexiblewidth="10" />
    </hlayout>
    <divider/>
    <hlayout flexibleheight="2">
            <tmpro text="Frostbite card: {scrap} {health_-1}" fontsize="20" flexiblewidth="10" />
    </hlayout> 
</vlayout>
		]]
    })

    return createSkillDef({
        id = "cryomancer_frostbiteskill_skill",
        name = "Frostbite",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/wind_storm",
        abilities = {
            createAbility({
                id = "cryomancer_frostbiteskill_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                layout = cardLayout,
				promptType = showPrompt,
                effect = createCardEffect(cryomancer_frostbite_carddef(), loc(oppPid, discardPloc)),
				cost = goldCost(2),
            }),
        }
        
    })
end

function cryomancer_frostbite_carddef()
-- Frostbite CARD v1.03
    return createDef(
        {
            id = "cryomancer_frostbite",
            name = "Frostbite",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
			playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "cryomancer_frostbite",
                        layout = cardLayout,
                        effect = hitSelfEffect(1),
						cost = sacrificeSelfCost,
                        trigger = autoTrigger,
						playAllType = noPlayPlayType,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Frostbite",
                    art = "icons/wind_storm",
                    frame = "frames/Wizard_CardFrame",
                    xmlText = [[
<vlayout forceheight="false" spacing="6">
<hlayout spacing="10">
<icon text="{scrap}" fontsize="60"/>
<icon text="{health_-1}" fontsize="60"/>
</hlayout>
</vlayout>
]],
                }
            )
        }
    )
end
 
function cryomancer_blizzard_carddef()
	return createHeroAbilityDef({
		id = "blizzard",
		name = "Blizzard",
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "blizzardActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Blizzard",
					art = "art/T_heavy_gust",
					frame = "frames/Wizard_CardFrame",
					xmlText = [[<vlayout forceheight="false" spacing="1">
<hlayout forcewidth="true" spacing="1">
<icon text="{scrap}" fontsize="40"/>
<vlayout  forceheight="false">
<text text="
Draw 2. 
Deal 3 damage to ALL champions (including yours)." fontsize="22"/>
</vlayout>
<icon text="" fontsize="1"/>
</hlayout>
</vlayout>
]]
				}),
				effect = drawCardsEffect(2).seq(damageTarget(3).apply(selectLoc(loc(currentPid, inPlayPloc)).union(selectLoc(loc(oppPid, inPlayPloc))).where(isCardChampion()))),
				cost = sacrificeSelfCost
			})
		},
        layout = createLayout({
            name = "Blizzard",	
            art = "art/T_heavy_gust",
            xmlText = [[<vlayout forceheight="false" spacing="1">
<hlayout forcewidth="true" spacing="1">
<icon text="{scrap}" fontsize="40"/>
<vlayout  forceheight="false">
<text text="
Draw 2. 
Deal 3 damage to ALL champions (including yours)." fontsize="22"/>
</vlayout>
<icon text="" fontsize="1"/>
</hlayout>
</vlayout>]]
        }),
        layoutPath  = "icons/wizard_serene_channel",
	})
end	


-- Pyromancer cards
function pyromancer_combust_carddef()
    return createDef(
        {
            id = "Pyromancer_Combust",
            name = "combust",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id="Pyromancer_Combust_combat",
						trigger= autoTrigger,
						effect = gainCombatEffect(1)
                    }),
			createAbility({
                id="Pyromancer_Combust_FGsac",
                trigger= autoTrigger,
				activations = singleActivations,
				check = selectLoc(loc(currentPid, castPloc)).union(selectLoc(loc(currentPid, discardPloc))).where(isCardName("fire_gem")).count().gte(1),
                effect = gainCombatEffect(2)

            })
            },
            layout = createLayout(
                {
                    name = "Combust",
                    art = "art/T_Spark",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="1">
        <tmpro text="{combat_1}" fontsize="42"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="+{combat_2} if you have a Fire Gem in play or in your discard pile." fontsize="24" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function pyromancer_sear_carddef()
    return createDef(
        {
            id = "Pyromancer_Sear",
            name = "sear",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "Pyromancer_Sear",
                        layout = cardLayout,
                        effect = gainCombatEffect(2),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Sear",
                    art = "art/T_Fire_Blast",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
<hlayout flexiblewidth="1">
<icon text="{combat_2}" fontsize="70"/>
</hlayout>
</vlayout>
					]],
                }
            )
        }
    )
end

function pyromancer_scorch_carddef()
    return createDef(
        {
            id = "Pyromancer_Scorch",
            name = "Scorch",
            types = {noStealType, actionType},
            acquireCost = 0,
            cardTypeLabel = "Action",
            playLocation = castPloc,
            abilities = {
                createAbility({
                        id = "Pyromancer_Scorch",
                        layout = cardLayout,
                        effect = gainCombatEffect(1).seq(damageTarget(1).apply(selectLoc(loc(oppPid, inPlayPloc)))),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Scorch",
                    art = "art/T_Pillar_Of_Fire",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="1">
        <tmpro text="{combat_1}" fontsize="50"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="Deal 1 damage to all opposing champions." fontsize="24" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function pyromancer_fire_shard_carddef()
    return createDef(
        {
            id = "pyromancer_fire_shard",
            name = "Fire Shard",
            types = {gemType, noStealType, itemType},
            acquireCost = 0,
            cardTypeLabel = "Item",
            playLocation = castPloc,
            abilities = {
                createAbility(
                    {
                        id = "pyromancer_fire_shard",
                        layout = cardLayout,
                        effect =
                        pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainGoldEffect(1),
                                            layout = layoutCard(
                                                {
                                                    title = "Fire Shard",
                                                    art = "art/treasures/T_Sharpened_ruby",
                                                    xmlText=[[
<vlayout>
<hlayout flexiblewidth="1">
<icon text="{gold_1}" fontsize="70"/>
</hlayout>
</vlayout>
													]]
                                                }
                                            ),
                                            tags = {gainGold1Tag}
                                        },
                                        {
                                            effect = createCardEffect(fire_gem_carddef(), currentDiscardLoc),
                                            layout = layoutCard(
                                                {
                                                    title = "Shadow Gem",
                                                    art = "art/treasures/T_Sharpened_ruby",
                                                    xmlText=[[
<vlayout>
<hlayout flexiblewidth="1">
<text text="Acquire a Fire Gem for free." fontsize="30"/>
</hlayout>
</vlayout>
													]]
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        ),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Fire Shard",
                    art = "art/treasures/T_Sharpened_ruby",
                    frame = "frames/Wizard_CardFrame",
                    xmlText=[[
<vlayout>
    <box flexibleheight="1">
        <tmpro text="{gold_1}" fontsize="50"/>
    </box>
    <box flexibleheight="1">
        <tmpro text="OR
Acquire a Fire Gem for free." fontsize="20" />
    </box>
</vlayout>
					]],
                }
            )
        }
    )
end

function pyromancer_conflagration_1p_carddef()
	return createHeroAbilityDef({
		id = "conflagration_1p",
		name = "Conflagration",
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "conflagration_1pActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Conflagration",
					art = "icons/growing_flame",
					xmlText = [[<vlayout forceheight="false" spacing="6">
							<hlayout forcewidth="true" spacing="10">
								<icon text="{scrap}" fontsize="40"/>
								<vlayout  forceheight="false">
							<icon text="{combat_5}" fontsize="30"/>
							<text text="Also gain any additional {combat} generated by your Fuel skill since the start of the game. Then replace Fuel with After Burn ({combat_1}{health_1})." fontsize="18"/>
								</vlayout>
							</hlayout>
						</vlayout>
							]]
				}),
				effect = gainCombatEffect(5).seq(gainCombatEffect(getCounter("conflagration_1p")))
				.seq(sacrificeTarget().apply(selectLoc(loc(currentPid, skillsPloc)).where(isCardName("pyromancer_fuel_1_skill").Or(isCardName("pyromancer_fuel_2_skill")).Or(isCardName("pyromancer_fuel_3_skill")).Or(isCardName("pyromancer_fuel_4_skill")).Or(isCardName("pyromancer_fuel_5_skill")))))
				.seq(createCardEffect(pyromancer_after_burn_carddef(), currentSkillsLoc)),
				cost = sacrificeSelfCost
			}),
		},
        layout = createLayout({
            name = "Conflagration",	
            art = "icons/growing_flame",
            xmlText = [[<vlayout forceheight="false" spacing="6">
    <hlayout forcewidth="true" spacing="10">
        <icon text="{scrap}" fontsize="40"/>
        <vlayout  forceheight="false">
	<icon text="{combat_5}" fontsize="30"/>
	<text text="Also gain any additional {combat} generated by your Fuel skill since the start of the game. Then replace Fuel with After Burn ({combat_1}{health_1})." fontsize="18"/>
        </vlayout>
    </hlayout>
</vlayout>
]]
        }),
        layoutPath  = "icons/fire_bomb",
	})
end	
 
function pyromancer_fuel_1carddef()
    local cardLayout = createLayout({
        name = "Fuel",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Add {combat_1} to your Conflagration ability. Then increase the value of this skill by {combat_1} (up to a maximum of {combat_5})." fontsize="22" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_fuel_1_skill",
        name = "Fuel",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "pyromancer_fuel_1_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = incrementCounterEffect("conflagration_1p", 1).seq(waitForClickEffect("Conflagration Total = 6"))
				.seq(sacrificeTarget().apply(selectLoc(loc(currentPid, skillsPloc)).where(isCardName("pyromancer_fuel_1_skill"))))
				.seq(createCardEffect(pyromancer_fuel_2carddef(), currentSkillsLoc)),
                cost = goldCost(2),
            }),
        }
        
    })
end

function pyromancer_fuel_2carddef()
    local cardLayout = createLayout({
        name = "Fuel",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Add {combat_2} to your Conflagration ability. Then increase the value of this skill by {combat_1} (up to a maximum of {combat_5})." fontsize="22" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_fuel_2_skill",
        name = "Fuel",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "pyromancer_fuel_2_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = incrementCounterEffect("conflagration_1p", 2).seq(waitForClickEffect("Conflagration Total = 8"))
				.seq(sacrificeTarget().apply(selectLoc(loc(currentPid, skillsPloc)).where(isCardName("pyromancer_fuel_2_skill"))))
				.seq(createCardEffect(pyromancer_fuel_3carddef(), currentSkillsLoc)),
                cost = goldCost(2),
            }),
        }
        
    })
end

function pyromancer_fuel_3carddef()
    local cardLayout = createLayout({
        name = "Fuel",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Add {combat_3} to your Conflagration ability. Then increase the value of this skill by {combat_1} (up to a maximum of {combat_5})." fontsize="22" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_fuel_3_skill",
        name = "Fuel",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "pyromancer_fuel_3_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = incrementCounterEffect("conflagration_1p", 3).seq(waitForClickEffect("Conflagration Total = 11"))
				.seq(sacrificeTarget().apply(selectLoc(loc(currentPid, skillsPloc)).where(isCardName("pyromancer_fuel_3_skill"))))
				.seq(createCardEffect(pyromancer_fuel_4carddef(), currentSkillsLoc)),
                cost = goldCost(2),
            }),
        }
        
    })
end

function pyromancer_fuel_4carddef()
    local cardLayout = createLayout({
        name = "Fuel",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Add {combat_4} to your Conflagration ability. Then increase the value of this skill by {combat_1} (up to a maximum of {combat_5})." fontsize="22" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_fuel_4_skill",
        name = "Fuel",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "pyromancer_fuel_4_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = incrementCounterEffect("conflagration_1p", 4).seq(waitForClickEffect("Conflagration Total = 15"))
				.seq(sacrificeTarget().apply(selectLoc(loc(currentPid, skillsPloc)).where(isCardName("pyromancer_fuel_4_skill"))))
				.seq(createCardEffect(pyromancer_fuel_5carddef(), currentSkillsLoc)),
                cost = goldCost(2),
            }),
        }
        
    })
end

function pyromancer_fuel_5carddef()
    local cardLayout = createLayout({
        name = "Fuel",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Add {combat_5} to your Conflagration ability." fontsize="22" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_fuel_5_skill",
        name = "Fuel",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "pyromancer_fuel_5_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = incrementCounterEffect("conflagration_1p", 5).seq(waitForClickEffect("+5 to Conflagration")),
                cost = goldCost(2),
            }),
        }
        
    })
end

function pyromancer_after_burn_carddef()
    local cardLayout = createLayout({
        name = "After Burn",
        art = "icons/growing_flame",
        frame = "frames/Wizard_CardFrame",
        xmlText = [[<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="{combat_1} {health_1}" fontsize="52" />
        </box>
    </hlayout>
</vlayout>]]
    })

    return createSkillDef({
        id = "pyromancer_after_burn_skill",
        name = "After Burn",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "icons/growing_flame",
        abilities = {
            createAbility({
                id = "after_burn_ab",
                trigger = uiTrigger,
				promptType = showPrompt,
                activations = singleActivation,
                layout = cardLayout,
                effect = gainCombatEffect(1).seq(gainHealthEffect(1)),
                cost = goldCost(2)
            }),
        }
        
    })
end


-- Thandalorian cards
function thandarlorian_combat_shield_carddef()
    return createDef({
        id="thandarlorian_combat_shield",
        name="Combat Shield",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="thandarlorian_combat_shield",
                trigger= autoTrigger,
                effect = gainToughnessEffect(2)
            }),
			createAbility({
                id="thandarlorian_combat_shield_combo",
				cost = noCost,
                trigger= uiTrigger,
				promptType = showPrompt,
					layout = createLayout({
					name = "Combat Shield",
					art = "art/T_Cleric_Brightstar_Shield",
					frame = "frames/Coop_Campaign_CardFrame",
					xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain 2 Toughness." fontsize="22"/>   
							</hlayout>    
								<hlayout spacing="10">
								<text text="If you have a champion in play, draw 1." fontsize="18"/>    
							</hlayout>
							</vlayout>]]
					}),
				activations = singleActivations,
				check = selectLoc(loc(currentPid, inPlayPloc)).where(isCardChampion()).count().gte(1),
                effect = drawCardsEffect(1),
            })
        },
        layout = createLayout({
            name = "Combat Shield",
            art = "art/T_Cleric_Brightstar_Shield",
            frame = "frames/Coop_Campaign_CardFrame",
            xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain 2 Toughness." fontsize="22"/>   
							</hlayout>    
								<hlayout spacing="10">
								<text text="If you have a champion in play, draw 1." fontsize="18"/>    
							</hlayout>
							</vlayout>]]
        })
    })
	end

function thandarlorian_coordinated_attack_carddef()
-- START Coordinated Attack CARD - v1.00
    return createDef({
        id="thandarlorian_coordinated_attack",
        name="Coordinated Attack",
        types={noStealType, itemType},
		cardTypeLabel = "Action",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="thandarlorian_coordinated_attack",
                trigger= autoTrigger,
                effect = gainCombatEffect(2)
            }),
			createAbility({
                id="thandarlorian_coordinated_attack_combo",
				cost = noCost,
                trigger= autoTrigger,
				promptType = showPrompt,
					layout = createLayout({
					name = "Coordinated Attack",
					art = "art/T_Rally_The_Troops",
					frame = "frames/Coop_Campaign_CardFrame",
					xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain {combat_2}." fontsize="22"/>   
							</hlayout>    
								<hlayout spacing="10">
								<text text="If you have 2 champions in play, gain another {combat_2} and 1 Toughness." fontsize="18"/>    
							</hlayout>
							</vlayout>]]
					}),
				activations = singleActivations,
				check = selectLoc(loc(currentPid, inPlayPloc)).where(isCardChampion()).count().gte(2),
                effect = gainCombatEffect(2).seq(gainToughnessEffect(1)),
            })
        },
        layout = createLayout({
            name = "Coordinated Attack",
            art = "art/T_Rally_The_Troops",
            frame = "frames/Coop_Campaign_CardFrame",
            xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain {combat_2}." fontsize="22"/>   
							</hlayout>    
								<hlayout spacing="10">
								<text text="If you have 2 champions in play, gain another {combat_2} and 1 Toughness." fontsize="18"/>    
							</hlayout>
							</vlayout>]]
        })
    })
	end

function thandarlorian_hand_ballista_carddef()
-- START Hand Ballista CARD - v1.00
    return createDef({
        id="thandarlorian_hand_ballista",
        name="Hand Ballista",
        types={noStealType, itemType, bowType, weaponType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="thandarlorian_hand_ballista",
                trigger= autoTrigger,
                effect = gainCombatEffect(1)
            })
        },
        layout = createLayout({
            name = "Hand Ballista",
            art = "art/T_Light_Crossbow",
            frame = "frames/Coop_Campaign_CardFrame",
            xmlText = [[<vlayout forceheight="false" spacing="6">
						<hlayout spacing="10">
						   <icon text="{combat_1}" fontsize="50"/>
						</hlayout>    
						  <hlayout forcewidth="true" spacing="10">
					  <text text="Ballista. Not blaster." fontsize="22"/>
						</hlayout>
					</vlayout>]]
        })
    })
	end

function thandarlorian_bounty_hunters_stone_of_seeking_carddef()
--[[ START Bounty Hunter's Stone of Seeking CARD - v1.00
]]
    return createDef({
        id="thandarlorian_bounty_hunters_stone_of_seeking",
        name="Bounty Hunter's Stone of Seeking",
        types={noStealType, itemType},
		cardTypeLabel = "Item",
		playLocation = castPloc,
        acquireCost=0,
        abilities = {
            createAbility({
                id="thandarlorian_bounty_hunters_stone_of_seeking",
                trigger= autoTrigger,
                effect = gainGoldEffect(1)
            }),
			createAbility({
                id="thandarlorian_bounty_hunters_stone_of_seeking_combo",
				cost = noCost,
                trigger= onStunGlobalTrigger,
				activations = singleActivations,
                effect = gainGoldEffect(1),
				layout = createLayout({
					name = "Bounty Hunter's Stone of Seeking",
					art = "art/T_Wizard_Alchemist_S_Stone",
					frame = "frames/Coop_Campaign_CardFrame",
					Text = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain {gold_1}. If you stun a champion this turn, gain another {gold_1}." fontsize="22"/>   
							</hlayout>
							</vlayout>]]
					}),
            })
        },
        layout = createLayout({
            name = "Bounty Hunter's Stone of Seeking",
            art = "art/T_Wizard_Alchemist_S_Stone",
            frame = "frames/Coop_Campaign_CardFrame",
            xmlText = [[<vlayout forceheight="false" spacing="6">
								<hlayout spacing="10">
								<text text="Gain {gold_1}. If you stun a champion this turn, gain another {gold_1}." fontsize="22"/>   
							</hlayout>
							</vlayout>]]
        })
    })
	end

function thandarlorian_bracer_blades_carddef()
	return createHeroAbilityDef({
		id = "bracer_blades",
		name = "Bracer Blades",
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "bracer_bladesActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Bracer Blades",
					art = "art/treasures/T_Bracers_Of_Brawn",
					xmlText = [[
					<vlayout>
					<hlayout flexibleheight="1">
					<box flexiblewidth="1">
					<tmpro text="{scrap}" fontsize="36"/>
					</box>
					<box flexiblewidth="7">
					<tmpro text="Hit a champion for 3 damage or gain {combat_2}. &lt;br&gt;&lt;br&gt;Make this choice 3 times." fontsize="22
					" />
					</box>
					</hlayout>
					</vlayout>
					]]					
				}),
				effect =
				pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = pushTargetedEffect({
                                                desc = "Deal 3 damage to target champion.",
                                                validTargets = oppStunnableSelector(),
                                                min = 0,
                                                max = 1,
                                                targetEffect = damageTarget(3),
                                                }),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "Deal 3 damage to target champion."
                                                }
                                            ),
                                            tags = {gainCombat6Tag}
                                        },
										{
                                            effect = gainCombatEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "<sprite name=\"combat_2\"> "
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        )
						.seq(pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = pushTargetedEffect({
                                                desc = "Deal 3 damage to target champion.",
                                                validTargets = oppStunnableSelector(),
                                                min = 0,
                                                max = 1,
                                                targetEffect = damageTarget(3),
                                                }),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "Deal 3 damage to target champion."
                                                }
                                            ),
                                            tags = {gainCombat6Tag}
                                        },
										{
                                            effect = gainCombatEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "<sprite name=\"combat_2\"> "
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        ))
						.seq(pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = pushTargetedEffect({
                                                desc = "Deal 3 damage to target champion.",
                                                validTargets = oppStunnableSelector(),
                                                min = 0,
                                                max = 1,
                                                targetEffect = damageTarget(3),
                                                }),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "Deal 3 damage to target champion."
                                                }
                                            ),
                                            tags = {gainCombat6Tag}
                                        },
										{
                                            effect = gainCombatEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Bracer Blades",
                                                    art = "art/treasures/T_Bracers_Of_Brawn",
                                                    text = "<sprite name=\"combat_2\"> "
                                                }
                                            ),
                                                                                    }
                                    }
                                }
                        )),
				cost = sacrificeSelfCost
			})
		},
        layout = createLayout({
            name = "Bracer Blades",	
            art = "art/treasures/T_Bracers_Of_Brawn",
            xmlText = [[
					<vlayout>
					<hlayout flexibleheight="1">
					<box flexiblewidth="1">
					<tmpro text="{scrap}" fontsize="36"/>
					</box>
					<box flexiblewidth="7">
					<tmpro text="Hit a champion for 3 damage or gain {combat_2}. &lt;br&gt;&lt;br&gt;Make this choice 3 times." fontsize="22
					" />
					</box>
					</hlayout>
					</vlayout>
					]]	
        }),
        layoutPath  = "art/treasures/T_Bracers_Of_Brawn",
	})
end	

function thandarlorian_whipcord_carddef()
    local cardLayout = createLayout({
        name = "Whipcord",
        art = "art/T_Thief_Enchanted_Garrote",
        frame = "frames/Coop_Campaign_CardFrame",
		xmlText = [[
<vlayout>
    <hlayout flexibleheight="1">
        <box flexiblewidth="1">
            <tmpro text="{expend_2}" fontsize="72"/>
        </box>
        <box flexiblewidth="7">
            <tmpro text="Move a champion of cost {gold_4} or less into your play area until end of turn. Champions moved this way will arrive in your play area expended. If you target an opponent's champion, return it to opponent's play area at end of turn and prepare it. If you target a champion from the market, return it to the top of the market deck at end of turn." fontsize="14"/>
</box>
</hlayout>
</vlayout>
		]]
    })

    return createSkillDef({
        id = "thandarlorian_whipcord_skill",
        name = "Whipcord",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "art/T_Thief_Enchanted_Garrote",
        abilities = {
            createAbility({
                id = "thandarlorian_whipcord_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                layout = cardLayout,
				promptType = showPrompt,
                effect = pushChoiceEffect(
                                {
                                    choices = {
										{
                                            effect = pushTargetedEffect({
												desc = "Expend target opponent's champion of cost 4 gold or less, then drag it into your play area. At end of turn, return it to opponent's play area. Prepare it..",
												validTargets = oppStunnableSelector().where(isCardChampion().And(getCardCost().lte(4))),
												min = 0,
												max = 1,
												targetEffect = addSlotToTarget(createAbilitySlot({
														ability = createAbility({
															id = "thandarlorian_whipcord_ability",
															effect = moveTargetWithLocAndPlayer(inPlayPloc, ownerPid).apply(selectSource()),
															trigger = oppStartOfTurnTrigger
														}),
														expiry = { startOfOwnerTurnExpiry }
													}))
													.seq(expendTarget()).seq(moveTarget(loc(currentPid, inPlayPloc))),
												}),
                                            layout = layoutCard(
                                                {
                                                    title = "Whipcord",
                                                    art = "art/T_Thief_Enchanted_Garrote",
                                                    xmlText = [[<vlayout>
																<hlayout flexibleheight="1">
																	<box flexiblewidth="1">
																		<tmpro text="Expend target opponent's champion of cost {gold_4} or less, then drag it into your play area. At end of turn, return it to opponent's play area. Prepare it." fontsize="18"/>
																	</box>
																</hlayout>
															</vlayout>]]
                                                }
                                            ),
                                            tags = {}
                                        },
                                        {
                                            effect = pushTargetedEffect({
												desc = "Drag champion of cost 4g or less from the Market into your play area. It will arrive expended. At end of turn, return it to the Market Deck. (Shuffle the deck.)",
												validTargets = selectLoc(centerRowLoc).where(isCardChampion().And(getCardCost().lte(4))),
												min = 0,
												max = 1,
												targetEffect = addSlotToTarget(createAbilitySlot({
														ability = createAbility({
															id = "thandarlorian_whipcord_ability",
															effect = moveTarget(tradeDeckLoc).apply(selectSource()),
															trigger = oppStartOfTurnTrigger
														}),
														expiry = { startOfOwnerTurnExpiry }
													}))
													.seq(expendTarget()).seq(moveTarget(loc(currentPid, inPlayPloc))),
												}),
                                            layout = layoutCard(
                                                {
                                                    title = "Whipcord",
                                                    art = "art/T_Thief_Enchanted_Garrote",
													xmlText = [[<vlayout>
																<hlayout flexibleheight="1">
																	<box flexiblewidth="1">
																		<tmpro text="Drag champion of cost {gold_4} or less from the Market into your play area. It will arrive expended. At end of turn, return it to the Market Deck." fontsize="18"/>
																	</box>
																</hlayout>
															</vlayout>]]
												}
                                            ),
                                                                                    }
                                    }
                                }
                        ),
                cost = goldCost(2),
            }),
        }
        
    })
end

function thandarlorian_dragon_shard_armour_carddef()
    local cardLayout = createLayout({
        name = "Dragon Shard Armour",
        art = "art/T_Fighter_Helm_Of_Fury_2",
        frame = "frames/Coop_Campaign_CardFrame",
		xmlText = [[
		<vlayout>
			<hlayout flexibleheight="1">
				<box flexiblewidth="1">
					<tmpro text="Each turn gain 2 Toughness" fontsize="22"/>
				</box>
			</hlayout>
		</vlayout>
		]]
    })

    return createSkillDef({
        id = "thandarlorian_dragon_shard_armour_skill",
        name = "Dragon Shard Armour",
        types = { skillType },
        layout = cardLayout,
        layoutPath = "art/T_Fighter_Helm_Of_Fury_2",
        abilities = {
            createAbility({
                id = "thandarlorian_dragon_shard_armour_ab",
                trigger = startOfTurnTrigger,
                activations = singleActivation,
                layout = cardLayout,
				promptType = noPrompt,
                effect = gainToughnessEffect(2),
                cost = noCost,
            }),
        }
        
    })
end


-- Paladin cards
function paladin_warhammer_carddef()
    return createDef(
        {
            id = "paladin_warhammer",
            name = "Warhammer",
            types = {weaponType, noStealType, paladinType, itemType, meleeWeaponType, hammerType},
            acquireCost = 0,
            cardTypeLabel = "Item",
            playLocation = castPloc,
            abilities = {
                createAbility(
                    {
                        id = "paladin_warhammer",
                        layout = cardLayout,
                        effect = ifElseEffect(selectLoc(currentCastLoc).where(isCardType(weaponType)).count().gte(2),
                        gainCombatEffect(2).seq(gainHealthEffect(2)),
                        pushChoiceEffect(
                                {
                                    choices = {
                                        {
                                            effect = gainCombatEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Warhammer",
                                                    art = "art/T_Flesh_Ripper",
                                                    text = "Gain <sprite name=\"combat_2\">"
                                                }
                                            ),
                                            tags = {gainCombat2Tag}
                                        },
                                        {
                                            effect = gainHealthEffect(2),
                                            layout = layoutCard(
                                                {
                                                    title = "Warhammer",
                                                    art = "art/T_Flesh_Ripper",
                                                    text = "Gain <sprite name=\"health_2\">"
                                                }
                                            ),
                                            tags = {gainHealth2Tag}
                                        }
                                    }
                                }
                        )),
                        trigger = autoTrigger,
                        tags = {}
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Warhammer",
                    art = "art/T_Flesh_Ripper",
                    frame = "frames/Cleric_CardFrame",
                    text = "Gain <sprite name=\"combat_2\"> or Gain <sprite name=\"health_2\"> \n <size=50%>If you have played a weapon this turn, gain both.</size>",
                }
            )
        }
    )
end

function paladin_crusader_carddef()
    return createChampionDef(
        {
            id = "paladin_Crusader",
            name = "Crusader",
            acquireCost = 0,
            health = 2,
            isGuard = true,
            abilities = {
                createAbility(
                    {
                        id = "Crusader_main",
                        trigger = uiTrigger,
                        cost = expendCost,
                        activations = multipleActivations,
                        effect = pushChoiceEffect(
                            {
                                choices = {
                                    {
                                        effect = gainGoldEffect(1),
                                        layout = layoutCard(
                                            {
                                                title = "Crusader",
                                                art = "avatars/man_at_arms",
                                                text = ("{1 gold}")
                                            }
                                        ),
                                        tags = {gainGoldTag}
                                    },
                                    {
                                        effect = gainHealthEffect(1),
                                        layout = layoutCard(
                                            {
                                                title = "Crusader",
                                                art = "avatars/man_at_arms",
                                                text = ("{1 health}")
                                            }
                                        ),
                                        tags = {gainHealthTag}
                                    }
                                }
                            }
                        )
                    }
                )
            },
            layout = createLayout(
                {
                    name = "Crusader",
                    art = "avatars/man_at_arms",
                    frame = "frames/Cleric_CardFrame",
                    text = "<size=250%><pos=-5%><sprite name=\"expend\"></pos></size><size=175%><pos=25%><voffset=.2em><sprite name=\"gold_1\"> or <sprite name=\"health_1\"></size></voffset>",
                    health = 2,
                    isGuard = true
                }
            )
        }
    )
end

function paladin_prayer_carddef()
    local cardLayout = createLayout({
        name = "Prayer",
        art = "icons/wind_storm",
        frame = "frames/Cleric_CardFrame",
        text = "<size=400%><line-height=0%><voffset=-.25em> <pos=-75%><sprite name=\"expend_2\"></size><line-height=135%> \n <voffset=2em><size=120%><pos=10%>Gain <sprite name=\"health_3\">\n   Gain  <sprite name=\"combat_1\">"
    })

    return createSkillDef({
        id = "paladin_prayer_skill",
        name = "Prayer",
        types = { paladinType, skillType },
        layout = cardLayout,
        layoutPath = "icons/wind_storm",
        abilities = {
            createAbility({
                id = "paladin_prayer_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                layout = cardLayout,
                promptType = showPrompt,
                effect = gainHealthEffect(3).seq(gainCombatEffect(1)),
                cost = goldCost(2),
            }),
        }
        
    })
end

function paladin_sacred_oath_carddef()
	return createHeroAbilityDef({
		id = "sacred_oath",
		name = "Sacred Oath",
		types = { heroAbilityType },
        abilities = {
            createAbility( {
                id = "sacred_oath_ab",
                trigger = uiTrigger,
                activations = singleActivation,
                promptType = showPrompt,
                layout = createLayout ({
                    name = "Sacred Oath",
                    art = "art/T_Devotion",
                    frame = "frames/Cleric_CardFrame",
                    text = "<voffset=1em><space=-.5em><voffset=-1.3em><size=200%><sprite name=\"scrap\"></size></voffset><pos=30%> <voffset=1.0em><line-height=40><space=-3.0em><space=1.5em>Prepare up to\n<space=1.5em>3 champions\n<space=1.5em>in play.</voffset></voffset>"
                    }),
                effect = pushTargetedEffect({
                    desc = "Choose up to 3 champions in play. Prepare those champions",
                    validTargets = s.CurrentPlayer(CardLocEnum.InPlay).where(isCardChampion()),
                    min = 1,
                    max = 3,
                    targetEffect = prepareTarget(),
			    }),
                cost = sacrificeSelfCost,
            }),
        },
        layout = createLayout({
            name = "Sacred Oath",
            art = "art/T_Devotion",
            text = "<voffset=1em><space=-.5em><voffset=-1.3em><size=200%><sprite name=\"scrap\"></size></voffset><pos=30%> <voffset=1.0em><line-height=40><space=-3.0em><space=1.5em>Prepare up to\n<space=1.5em>3 champions\n<space=1.5em>in play.</voffset></voffset>"
        }),
        layoutPath  = "art/T_Devotion",
	})
end	


-- Witch cards
function siphon_life_def()
	return createSkillDef({
		id = "siphon_life",
		name = "Siphon Life",
		cardTypeLabel = "Skill",
		types = { skillType },
        abilities = {
			createAbility({
				id = "siphonLifeActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Siphon Life",
					art = "art/T_Life_Force",
					frame = "frames/Wizard_CardFrame",
					xmlText = [[<hlayout>
							<icon text="{expend_2}" fontsize="80" flexibleheight="2"/>
							<vlayout>
								<icon text="Steal 1 current and maximum {health} from your opponent." fontsize="20" flexibleheight="2"/>
							</vlayout>
						</hlayout>]]
				}),
				effect = gainMaxHealthEffect(currentPid, 1).seq(gainHealthEffect(1)).seq(hitOpponentEffect(1)).seq(gainMaxHealthEffect(oppPid, -1)),
				cost = goldCost(2)
			})
		},
		layout = createLayout({
			name = "Siphon Life",
			art = "art/T_Life_Force",
			frame = "frames/Wizard_CardFrame",
			xmlText = [[<hlayout>
					<icon text="{expend_2}" fontsize="80" flexibleheight="2"/>
					<vlayout>
						<icon text="Steal 1 current and maximum {health} from your opponent." fontsize="20" flexibleheight="2"/>
					</vlayout>
				</hlayout>]]
		}),
		layoutPath = "art/T_Life_Force"
	})
end		

function piercing_screech_def()
	return createDef({
		id = "piercing_screech",
		name = "Piercing Screech",
		acquireCost = 0,
		cardTypeLabel = "Ability",
		playLocation = skillsPloc,
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "piercingScreechActivate",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Piercing Screech",
					art = "art/T_Banshee",
					xmlText = [[
						<hlayout>
							<icon text="{scrap}" fontsize="60" flexibleheight="2"/>
							<vlayout>
								<icon text="Target opponent discards two cards." fontsize="24" flexibleheight="2"/>
							</vlayout>
						</hlayout>
					]]
			}),
				effect = oppDiscardEffect(2),
				cost = sacrificeSelfCost
			})
		},
		layout = createLayout({
			name = "Piercing Screech",
			art = "art/T_Banshee",
			xmlText = [[
				<hlayout>
					<icon text="{scrap}" fontsize="60" flexibleheight="2"/>
					<vlayout>
						<icon text="Target opponent discards two cards." fontsize="24" flexibleheight="2"/>
					</vlayout>
				</hlayout>
			]]
		}),
		layoutPath= "art/T_Banshee"
	})
end	

function witch_flash_freeze_carddef()
	local cardLayout = createLayout({
		name = "Flash Freeze",
		art = "icons/ranger_fast_track",
		frame = "frames/Wizard_CardFrame",
		text = "<size=180%><sprite name=\"combat_1\"><size=100%><br>Expend target champion."
	})
	
	return createActionDef({
		id = "witch_flash_freeze",
		name = "Flash Freeze",
		layout = cardLayout,
		abilities = {
			createAbility({
				id = "flashFreezeMain",
				trigger = autoTrigger,
				effect = gainCombatEffect(1).seq(pushTargetedEffect({
					desc = "Expend target Champion",
					min = 1,
					max = 1,
					validTargets = selectLoc(loc(oppPid, inPlayPloc)).where(isCardStunnable()).where(isCardExpended().invert()),
					targetEffect = expendTarget()
				}))
			})
		}
	})
end

function witch_cauldron_carddef()
	local cardLayout = createLayout({
		name = "Witch's Cauldron",
		art = "art/T_Confused_Apparition",
		frame = "frames/Coop_Campaign_CardFrame",
		cardTypeLabel = "Item",
		xmlText = [[<vlayout>
				<icon text="{gold_1} {health_3}" fontsize="40" flexibleheight="2"/>
				<divider/>
				<icon text="You may stun a friendly champion. If you do, draw a card." fontsize="20" flexibleheight="2"/>
			</vlayout>]]
	})
	
	return createDef({
		id = "witch_cauldron",
		name = "Witch's Cauldron",
		acquireCost = 0,
		cardTypeLabel = "Item",
		types = { itemType },
		layout = cardLayout,
		playLocation = castPloc,
		abilities = {
			createAbility({
				id = "cauldronMain",
				trigger = autoTrigger,
				effect = gainGoldEffect(1).seq(gainHealthEffect(3))
			}),
			createAbility({
				id = "cauldronStun",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = cardLayout,
				effect = pushTargetedEffect({
					desc = "Stun a friendly champion.",
					min = 1,
					max = 1,
					validTargets = selectLoc(loc(currentPid, inPlayPloc)),
					targetEffect = stunTarget().seq(drawCardsEffect(1))
				}),
				check = selectLoc(currentInPlayLoc).count().gte(1)
			})
		}
	})
end

-- Shaman cards
function flame_burst_carddef()
    return createActionDef({
        id="flame_burst",
        name="Flame Burst",
        types={noStealType,actionType},
        acquireCost=0,
        abilities = {
            createAbility({
                id="flame_burst_auto",
                trigger= autoTrigger,
                effect = gainCombatEffect(2)
            })
        },
        layout = createLayout({
            name = "Flame Burst",
            art = "art/T_Spreading_Sparks",
            frame = "frames/Generic_CardFrame",
            xmlText = [[
                <vlayout>
                    <hlayout flexibleheight="1">
                        <box flexiblewidth="8">
                            <tmpro text="{combat_2}" fontsize="100"/>
                        </box>
                    </hlayout>
                </vlayout>
            ]]
        })
    })
end

function call_lightning_carddef()
    return createActionDef({
        id="call_lightning",
        name="Call Lightning",
        types={noStealType,actionType},
        acquireCost=0,
        playAllType={noPlayPlayType,blockPlayType},
        abilities = {
            createAbility(
                {
                    id="call_lightning_auto",
                    trigger= autoTrigger,
                    effect = gainCombatEffect(selectLoc(currentCastLoc).where(isCardAction()).count())
                }
            )
        },
        layout = createLayout({
            name = "Call Lightning",
            art = "icons/wizard_soul_channel",
            frame = "frames/Generic_CardFrame",
            xmlText = [[
                <vlayout>
                    <hlayout flexibleheight="1">
                        <box flexiblewidth="8">
                            <tmpro text="Gain {combat_1} for every action in play" fontsize="40" />
                        </box>
                    </hlayout>
                </vlayout>
            ]]
        })
    })
end

function natures_blessing_carddef()

    return createActionDef({
        id="natures_blessing",
        name="Natures Blessing",
        types={noStealType,actionType},
        acquireCost=0,
        abilities = {
            createAbility(
                {
                    id="natures_blessing_auto",
                    trigger= autoTrigger,
                    effect = gainGoldEffect(1).seq(healPlayerEffect(currentPid,1))
                }
            )
        },
        layout = createLayout({
            name = "Natures Blessing",
            art = "art/T_Nature_S_Bounty",
            frame = "frames/Generic_CardFrame",
            xmlText = [[
                <vlayout>
                    <hlayout flexibleheight="1">
                        <box flexiblewidth="8">
                            <tmpro text="{gold_1} {health_1}" fontsize="80" />
                        </box>
                    </hlayout>
                </vlayout>
            ]]
        })
    })
end

function gift_of_the_elements_carddef()

    local protectionLayout = layoutCard({
        name = "Protection",
        art = "art/T_Splashing_Wave",
        xmlText = [[
            <vlayout>
                <hlayout flexibleheight="1">
                    <box flexiblewidth="8">
                        <tmpro text="Gain {health}" fontsize="50" />
                    </box>
                </hlayout>
            </vlayout>
        ]]
    })

    local destructionLayout = layoutCard({
        name = "Destruction",
        art = "art/T_Spreading_Blaze",
        xmlText = [[
            <vlayout>
                <hlayout flexibleheight="1">
                    <box flexiblewidth="8">
                        <tmpro text="Gain {combat}" fontsize="50" />
                    </box>
                </hlayout>
            </vlayout>
        ]]
    })

    return createSkillDef({
        id="gift_of_the_elements",
        name="icons/wind_storm",
        cardTypeLabel = "Skill",
		types = { skillType },
        acquireCost = 2,
        abilities  = {
            createAbility({
                trigger = uiTrigger,
                id="gift_of_the_elements_trigger",
                cost = goldCost(2),
                effect = pushChoiceEffect({
					choices = {
						{
                            layout = destructionLayout,
                            effect= gainCombatEffect(selectLoc(currentCastLoc).where(isCardAction()).count()),
                            tags = {}
                        },
                        {
                            layout = protectionLayout,
                            effect = healPlayerEffect(currentPid, selectLoc(currentCastLoc).where(isCardAction()).count()),
                            tags = {}
                        }
                    }    
                })
            })
                
        },
        layout = createLayout({
            name = "Gift of the Elements",
            art = "icons/wind_storm",
            frame = "frames/Generic_CardFrame",
            xmlText = [[
                <vlayout>
                    <hlayout flexibleheight="1">
                        <box flexiblewidth="1">
                            <tmpro text="{expend_2}" fontsize="72" />
                        </box>
                        <box flexiblewidth="7">
                            <tmpro text="Gain {combat_1} or {health_1} for every action in play" fontsize="32" />
                        </box>
                    </hlayout>
                </vlayout>
            ]]
        }),
        layoutPath = "icons/wind_storm"
    })
end

function elemental_surge_def()
	return createDef({
		id = "elemental_surge_def",
		name = "Elemental Surge",
		acquireCost = 0,
		cardTypeLabel = "Ability",
		playLocation = skillsPloc,
		types = { heroAbilityType },
        abilities = {
			createAbility({
				id = "elemental_surge_active",
				trigger = uiTrigger,
				promptType = showPrompt,
				layout = createLayout({
					name = "Elemental Surge",
					art = "icons/growing_flame",
					xmlText = [[
                        <vlayout>
                            <hlayout flexibleheight="1">
                                <box flexiblewidth="8">
                                    <tmpro text="Gain {combat_1}, {health_1}, and {gold_1} for every action you have in play" fontsize="30" />
                                </box>
                            </hlayout>
                        </vlayout>
                    ]]
                }),
				effect = gainCombatEffect(selectLoc(currentCastLoc).where(isCardAction()).count()).seq(healPlayerEffect(currentPid, selectLoc(currentCastLoc).where(isCardAction()).count())).seq(gainGoldEffect(selectLoc(currentCastLoc).where(isCardAction()).count())),
				cost = sacrificeSelfCost
			})
		},
		layout = createLayout({
			name = "Elemental Surge",
			art = "icons/growing_flame",
			xmlText = [[
                <vlayout>
                    <hlayout flexibleheight="1">
                        <box flexiblewidth="8">
                            <tmpro text="Gain {combat_1}, {health_1}, and {gold_1} for every action you have in play" fontsize="30" />
                        </box>
                    </hlayout>
                </vlayout>
            ]]
        }),
		layoutPath= "icons/growing_flame"
	})
end	


-- Auxiliary effects
local function goFirstEffect()
-- this is a dirty hack to make player going first only draw three cards for their first turn. Feel free to replace it with a better implementation.
	return createGlobalBuff({
        id="draw_three_start_buff",
        name = "Go First",
        abilities = {
            createAbility({
                id="go_first_draw_effect",
                trigger = endOfTurnTrigger,
                effect = ifElseEffect(
					getTurnsPlayed(oppPid).eq(1),
					nullEffect(),
					drawCardsEffect(2)
				)
            })
        }
    })
end

local function chooseTheClass()
    return cardChoiceSelectorEffect({
        id = "choose_the_class",
        name = "Choose a class",
        trigger = startOfTurnTrigger,

        upperTitle  = "Make your choice.",
        lowerTitle  = "Do you want to play as a custom class, or use the character you picked when starting the game?",

        effectFirst=sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Unknown", currentPid))
			.seq(setPlayerAvatarEffect("assassin", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(50).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(50))
			.seq(createCardEffect(choose_demonologist_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_apothecary_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_cryomancer_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_thandarlorian_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_pyromancer_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_paladin_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_witch_carddef(), currentDeckLoc))
			.seq(createCardEffect(choose_shaman_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(drawCardsEffect(8))
			.seq(waitForClickEffect("Please play the card corresponding to the class you wish to play.", ""))
			.seq(waitForClickEffect("Note: Game does not currently work properly if both players choose Pyromancer."))
			.seq(waitForClickEffect("You can Undo your choice."))
			.seq(waitForClickEffect("If you wish to preview the class cards, skill and ability, play the class card, review the cards..."))	
			.seq(waitForClickEffect("...then Undo to return to class selection.")),
        effectSecond = waitForClickEffect("Thank you for choosing your class.", "")
		.seq(waitForClickEffect("For game to begin normally please end turn now.", "")),

        layoutFirst = createLayout({
            name = "Pick a custom class",
            art = "art/T_Storm_Siregar",
            text = "Choose 1 of 8 level 3 Custom Characters to play."  }),

        layoutSecond = createLayout({
            name = "Selected class",
            art = "art/T_All_Heroes",
            text = "Play as the character you selected when setting up the game." }),

        turn = 1
    })
end

function setupGame(g)
    registerCards(
        g,
        {
	choose_demonologist_carddef(),
			demonologist_shadow_gem_carddef(),
			demonologist_shadow_feeder_carddef(),
			demonologist_void_guard_carddef(),
			demonologist_lesser_devourer_carddef(),
			demonologist_summon_greater_demon_carddef(),
			demonologist_demonic_leech_carddef(),
			demonologist_succubus_carddef(),
			demonologist_fel_hound_carddef(),
			demonologist_incubus_carddef(),
			demonologist_keeper_of_the_void_carddef(),
			demonologist_demon_master_carddef(),
	choose_apothecary_carddef(),
			apothecary_apprentice_potion_maker_carddef(),
			apothecary_red_potion_carddef(),
			apothecary_green_potion_carddef(),
			apothecary_yellow_potion_carddef(),
			apothecary_mezzaluna_carddef(),
	choose_cryomancer_carddef(),
			cryomancer_ice_burst_carddef(),
			cryomancer_ice_shield_carddef(),
			cryomancer_ice_gem_carddef(),
			cryomancer_freeze_carddef(),
			cryomancer_frostbite_carddef(),
	choose_pyromancer_carddef(),
			pyromancer_sear_carddef(),
			pyromancer_scorch_carddef(),
			pyromancer_fire_shard_carddef(),
			pyromancer_combust_carddef(),
			pyromancer_fuel_1carddef(),
			pyromancer_fuel_2carddef(),
			pyromancer_fuel_3carddef(),
			pyromancer_fuel_4carddef(),
			pyromancer_fuel_5carddef(),
	choose_thandarlorian_carddef(),
			thandarlorian_coordinated_attack_carddef(),
			thandarlorian_combat_shield_carddef(),
			thandarlorian_hand_ballista_carddef(),
			thandarlorian_bounty_hunters_stone_of_seeking_carddef(),
	choose_paladin_carddef(),
	        paladin_warhammer_carddef(),
            paladin_crusader_carddef(),
            paladin_prayer_carddef(),
            paladin_sacred_oath_carddef(),
	choose_witch_carddef(),
			witch_flash_freeze_carddef(),
			witch_cauldron_carddef(),
			siphon_life_def(),
			piercing_screech_def(),
	choose_shaman_carddef(),		
			flame_burst_carddef(),
			call_lightning_carddef(),
			gift_of_the_elements_carddef(),
			natures_blessing_carddef()
        }
    )

    standardSetup(
        g,
        {
            description = "Lilu Dallas Multi-Class. Multi-class script by Aarkenell and Userkaffe. Classes by Aarkenell, Userkaffe, AgentC13, & Filtrophobe. Updated 31.08.2023.",
             playerOrder = { plid1, plid2 },
        ai = ai.CreateKillSwitchAi(createAggressiveAI(),  createHardAi2()),
        timeoutAi = createTimeoutAi(),
        opponents = { { plid1, plid2 } },
        players = {
            {
                id = plid1,
                startDraw = 0,
                init = {
                    fromEnv = plid1
                },
                cards = {
                    buffs = {
						drawCardsCountAtTurnEndDef(3),
						goFirstEffect(),
                        discardCardsAtTurnStartDef(),
						chooseTheClass(),
						fatigueCount(42, 1, "FatigueP2")
                    }
                }
            },
            {
                id = plid2,
                startDraw = 0,
				init = {
                    fromEnv = plid2
                },
                cards = {
                    buffs = {
                        drawCardsCountAtTurnEndDef(5),
                        discardCardsAtTurnStartDef(),
						chooseTheClass(),
						fatigueCount(42, 1, "FatigueP2")
                    }
                }
            }            
        }
    })
end

function endGame(g)
end
