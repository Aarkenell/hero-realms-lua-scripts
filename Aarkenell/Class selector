local function chooseTheClass()
    return cardChoiceSelectorEffect({
        id = "choose_the_class_demonologist",
        name = "Choose a class",
        trigger = startOfTurnTrigger,

        upperTitle  = "Choose a class",
        lowerTitle  = "",

        effectFirst = sacrificeTarget().apply(selectLoc(loc(currentPid, handPloc)).union(selectLoc(loc(currentPid, deckPloc))).union(selectLoc(loc(currentPid, skillsPloc))))
			.seq(setPlayerNameEffect("Demonologist", currentPid))
			.seq(setPlayerAvatarEffect("ruinos_zealot", currentPid))
			.seq(gainMaxHealthEffect(currentPid, const(50).add(getPlayerMaxHealth(currentPid).negate())))
			.seq(gainHealthEffect(50))
			.seq(createCardEffect(demonologist_summon_demon_carddef(), currentSkillsLoc))
			.seq(createCardEffect(demonologist_summon_greater_demon_carddef(), currentSkillsLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(gold_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_shadow_feeder_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_void_guard_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_lesser_devourer_carddef(), currentDeckLoc))
			.seq(createCardEffect(demonologist_shadow_gem_carddef(), currentDeckLoc))
			.seq(shuffleEffect(currentDeckLoc))
			.seq(waitForClickEffect("Thank you for choosing your class.", ""))
		.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
		.seq(waitForClickEffect("Once the game ends, click back on the game record tile. An 'Add to Favourites' tile will have appeared alongside 'Replay' and 'Rematch'.", ""))
		.seq(waitForClickEffect("Once favourited, you will be able to host your own custom games using this script.", ""))
		.seq(waitForClickEffect("For game to begin normally please end turn now.", "")),
        effectSecond = waitForClickEffect("Thank you for choosing your class.", "")
		.seq(waitForClickEffect("If you enjoy this game, be sure to Favourite the script.", ""))
		.seq(waitForClickEffect("Once the game ends, click back on the game record tile. An 'Add to Favourites' tile will have appeared alongside 'Replay' and 'Rematch'.", ""))
		.seq(waitForClickEffect("Once favourited, you will be able to host your own custom games using this script.", ""))
		.seq(waitForClickEffect("For game to begin normally please end turn now.", "")),

        layoutFirst = createLayout({
            name = "Demonologist",
            art = "art/T_Tyrannor_The_Devourer",
            text = "Play as a level 3 Demonologist."  }),

        layoutSecond = createLayout({
            name = "Selected class",
            art = "art/gold_female_white_grayscale",
            text = "Play as the character you selected when setting up the game." }),

        turn = 1
    })
end

local function goFirstEffect()
	return createGlobalBuff({
        id="draw_three_start_buff",
        name = "Go First",
        abilities = {
            createAbility({
                id="go_first_draw_effect",
                trigger = endOfTurnTrigger,
                effect = ifElseEffect(
					getTurnsPlayed(oppPid).eq(1),
					nullEffect(),
					drawCardsEffect(2)
				)
            })
        }
    })
end

function setupGame(g)
    registerCards(
        g,
        {
            demonologist_shadow_gem_carddef(),
			demonologist_shadow_feeder_carddef(),
			demonologist_void_guard_carddef(),
			demonologist_lesser_devourer_carddef(),
			demonologist_summon_greater_demon_carddef(),
			demonologist_demonic_leech_carddef(),
			demonologist_succubus_carddef(),
			demonologist_fel_hound_carddef(),
			demonologist_incubus_carddef(),
			demonologist_keeper_of_the_void_carddef(),
			demonologist_demon_master_carddef(),
        }
    )

    standardSetup(
        g,
        {
            description = "Demonologist Class (v3.03). Created by Aarkenell.",
            playerOrder = { plid1, plid2 },
        ai = ai.CreateKillSwitchAi(createAggressiveAI(),  createHardAi2()),
        timeoutAi = createTimeoutAi(),
        opponents = { { plid1, plid2 } },
        players = {
            {
                id = plid1,
                startDraw = 0,
                init = {
                    fromEnv = plid1
                },
                cards = {
                    buffs = {
						drawCardsCountAtTurnEndDef(3),
						goFirstEffect(),
                        discardCardsAtTurnStartDef(),
						chooseTheClass(),
						fatigueCount(42, 1, "FatigueP2")
                    }
                }
            },
            {
                id = plid2,
                startDraw = 0,
				init = {
                    fromEnv = plid2
                },
                cards = {
                    buffs = {
                        drawCardsCountAtTurnEndDef(5),
                        discardCardsAtTurnStartDef(),
						chooseTheClass(),
						fatigueCount(43, 1, "FatigueP2")
                    }
                }
            }            
        }
    })
end

function endGame(g)
end
